스프링(Spring)


Java -> JSP -> Spring(프레임워크)


프레임 워크 - 특정한 종류의 애플리케이션을 개발하기 위해 제공되는 일련의
라이브러리, 도구, 규칙 및 구조


Spring Framework => java 기반 애플리케이션 개발을 쉽고 편리하게 해주는
오픈소스 애플리케이션 프레임워크


Spring 특징


Spring 프레임워크 => 다양한 자바 애플리케이션 개발에 사용되는 강력하고 유연한
프레임워크


스프링 삼각형은 Spring 프레임워크의 세 가지 핵심 개념을 설명하는 비유적인 표현


Maven 개요

 
Maven -> 애플리케이션 개발에 필요한 라이브러리를 편리하고 효율적 관리
빌드 관리 도구



POM -> Maven 의존 라이브러리 관리 설정 파일


Spring 프레임워크 -> 기본적으로 Maven 기반 프로젝트


1. Ioc/DI


Ioc - > 객체의 생성과 생명주기를 컨테이너에게 위임하는 형태
객체의 제어가 바뀜을 의미하는 제어의 역행

DI - > 의존성 주입으로 컨테이너로 부터 객체를 주입 받는 기법

Ioc/DI를 이용하면 객체 생성과 의존 관계 처리를 컨테이너가 담장하기 때문에
낮은 결합도의 컴포넌트 구현

2. 스프링 컨테이너

스프링 컨테이너 - > 스프링 애플리케이션을 구성하는 빈을 생성 관리 및 제공
스프링 빈 -> 스프링 컨테이너로 관리하는 자바 객체로 빈 등록은 xnl Annoaion
설정 클래스 사용

ApplicationContext -> 빈을 싱글톤으로 관리

3. 의존성 주입

의존성 주입 - > 객체가 직접 의존하는 객체를 생성하거나 관리하지 않고 외부로
부터 주입 받는 디자인 패턴

의존성 주입은 객체 지향 프로그래밍에서 코드의 결합도를 낮추고 유연성을
높이는 데 사용

DI - > 객체지향 설계의 중요한 SOLID 원칙을 준수하도록 돕는 중요한 메커니즘


Spring aop

1. 핵심 기능과 부가 기능

업무 로직 - > 핵심기능과 부가 기능으로 구성

핵심기능 -> 애플리케이션 주요 비즈니스 로직 또는 주요 기능을 수행하는 모듈
또는 클래스

부가기능 -> 핵심기능을 보완하거나 

2. aop 개요

aop -> 여러 객체에서 공통으로 사용하는 기능을 분리해서 재사용성을 높이는
프로그래밍 기법 (관점지향 프로그래밍)

핵심기능에서 부가 기느을 분리해서 관심사 라는 모듈형태로 만들어서 설계하고
개발하는 방법

핵심 기능과 부가 기능 간의 결합도를 낮추고 코드의 재사용성과 유연성을 향상

3. AOP어노테이션

AOP어노테이션을 사용해 핵심기능 실행전 후 예외 발생 시점등과 같은 특정지점에서
부가기능 적용

ORM개요

데이터 영속성 -> 데이터를 생성한 프로그램이 종료되더라고 데이터가 사라지지 않는 데이터의 특성

ORM -> 객체와 데이터베이스 테이블을 자동으로 연결하는 기술

ORM 기술을 지원하는 프레임워크로 MyBatis Hibernate JAP 등










